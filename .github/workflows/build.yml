name: Build phone-caster & car-receiver APKs
on: [workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - name: List repo root (debug)
        run: |
          echo "== REPO ROOT =="
          ls -la

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 1) 自动找到仓库根目录里的任意 zip
      - name: Locate project ZIP
        id: zip
        shell: bash
        run: |
          set -e
          ZIP=$(find . -maxdepth 1 -type f -name "*.zip" | head -n1 || true)
          if [ -z "$ZIP" ]; then
            echo "❌ 根目录没有 .zip 文件，请把源码压缩包放到仓库根目录"; exit 1
          fi
          echo "Using ZIP: $ZIP"
          echo "ZIP=$ZIP" | tee -a $GITHUB_OUTPUT

      # 2) 解压并打印目录结构（你之前是 srczip/ScreenCastProject_ready_fixed/...）
      - name: Unzip project ZIP
        run: |
          set -e
          unzip -q "${{ steps.zip.outputs.ZIP }}" -d srczip
          echo "== Unzipped to srczip (depth 5) =="
          find srczip -maxdepth 5 -printf "%y %p\n" | sed -e 's/^/  /'

      # 3) 方案1：显式查找名为 phone-caster / car-receiver 的工程（允许嵌套）
      #    条件：目录名匹配 + 同级存在 settings.gradle(.kts) + 存在 app 模块
      - name: Detect Android projects in ZIP (nested-aware)
        id: detect
        shell: bash
        run: |
          set -e
          find_one() {
            local name="$1"
            local got=""
            while IFS= read -r d; do
              if { test -f "$d/settings.gradle" || test -f "$d/settings.gradle.kts"; } \
                 && { test -d "$d/app" || test -f "$d/app/build.gradle" || test -f "$d/app/build.gradle.kts"; }; then
                got="$d"; break
              fi
            done < <(find srczip -type d -name "$name")
            echo "$got"
          }

          PHONE_DIR="$(find_one phone-caster)"
          CAR_DIR="$(find_one car-receiver)"

          echo "Found:"
          echo "  phone-caster -> ${PHONE_DIR:-<none>}"
          echo "  car-receiver -> ${CAR_DIR:-<none>}"

          if [ -z "$PHONE_DIR" ] || [ -z "$CAR_DIR" ]; then
            echo "❌ 没找到 phone-caster 或 car-receiver（需要 settings.gradle* 与 app 模块）"; exit 1
          fi

          echo "PHONE_DIR=$PHONE_DIR"   | tee -a $GITHUB_OUTPUT
          echo "CAR_DIR=$CAR_DIR"       | tee -a $GITHUB_OUTPUT

      # 4) 规范化到固定目录
      - name: Normalize project folders
        run: |
          set -e
          rm -rf phone-caster car-receiver
          rsync -a "${{ steps.detect.outputs.PHONE_DIR }}/"   phone-caster/
          rsync -a "${{ steps.detect.outputs.CAR_DIR }}/"     car-receiver/
          echo "== phone-caster top =="
          ls -la phone-caster | head -n 80
          echo "== car-receiver top =="
          ls -la car-receiver | head -n 80

      # 5) 切 Gradle 分发镜像，并赋权 gradlew（避免官方分发抽风）
      - name: Switch Gradle wrapper to CN mirror & chmod
        run: |
          set -e
          for f in phone-caster/gradle/wrapper/gradle-wrapper.properties car-receiver/gradle/wrapper/gradle-wrapper.properties; do
            if [ -f "$f" ]; then
              cp "$f" "$f.bak" || true
              # 默认用 Gradle 中国镜像
              sed -i 's#https://services.gradle.org/distributions#https://downloads.gradle-dn.com/distributions#g' "$f"
              # 如需换腾讯云：注释上一行、放开下一行
              # sed -i 's#https://services.gradle.org/distributions#https://mirrors.cloud.tencent.com/gradle#g' "$f"
              echo "---- $f ----"; tail -n +1 "$f"
            fi
          done
          chmod +x phone-caster/gradlew || true
          chmod +x car-receiver/gradlew || true

      # 6) 用各自 wrapper 编译 Debug 包
      - name: Build phone-caster (debug)
        working-directory: phone-caster
        env:
          GRADLE_USER_HOME: ${{ github.workspace }}/.gradle-home
        run: ./gradlew --no-daemon --stacktrace assembleDebug

      - name: Build car-receiver (debug)
        working-directory: car-receiver
        env:
          GRADLE_USER_HOME: ${{ github.workspace }}/.gradle-home
        run: ./gradlew --no-daemon --stacktrace assembleDebug

      # 7) 收集 APK 并打包
      - name: Collect APKs into a single ZIP
        run: |
          mkdir -p out
          cp phone-caster/app/build/outputs/apk/debug/*.apk out/phone-caster-debug.apk || true
          cp car-receiver/app/build/outputs/apk/debug/*.apk out/car-receiver-debug.apk || true
          (cd out && zip -9 -r apks.zip . && ls -la)

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apks
          path: out/apks.zip
