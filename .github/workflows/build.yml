name: Build phone-caster & car-receiver APKs
on: [workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - name: List repo root (debug)
        run: |
          echo "== REPO ROOT =="
          ls -la

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 1) 自动定位仓库里的 ZIP（任意名字）
      - name: Locate project ZIP
        id: zip
        shell: bash
        run: |
          set -e
          ZIP=$(find . -maxdepth 1 -type f -name "*.zip" | head -n1 || true)
          if [ -z "$ZIP" ]; then
            echo "❌ 根目录没有 .zip"; exit 1
          fi
          echo "ZIP=$ZIP" | tee -a $GITHUB_OUTPUT
          echo "Using ZIP: $ZIP"

      # 2) 解压 & 打印目录树（多打印几层方便调试）
      - name: Unzip project ZIP
        run: |
          set -e
          unzip -q "${{ steps.zip.outputs.ZIP }}" -d srczip
          echo "== Unzipped to srczip (depth 5) =="
          find srczip -maxdepth 5 -printf "%y %p\n" | sed -e 's/^/  /'

      # 3) 更稳健的工程识别：
      #    条件：目录下同时含有 (gradlew 或 gradlew.bat) AND (settings.gradle* 存在)
      #         且包含名为 app 的模块，并在 app 目录内存在 build.gradle(.kts)
      - name: Detect Android projects in ZIP
        id: detect
        shell: bash
        run: |
          set -e
          mapfile -t CANDS < <(find srczip -type f \( -name "settings.gradle" -o -name "settings.gradle.kts" \) -printf "%h\n" | sort -u)
          PROJ=()
          for root in "${CANDS[@]}"; do
            # 有 wrapper（在同级或上一级常见）
            if [ -f "$root/gradlew" ] || [ -f "$root/../gradlew" ] || [ -f "$root/gradlew.bat" ] || [ -f "$root/../gradlew.bat" ]; then
              # 找 app 模块（允许多一层壳）
              if [ -f "$root/app/build.gradle" ] || [ -f "$root/app/build.gradle.kts" ] \
                 || [ -f "$root/*/app/build.gradle" ] || [ -f "$root/*/app/build.gradle.kts" ]; then
                PROJ+=("$root")
              fi
            fi
          done

          echo "Found candidate roots:"
          printf ' - %s\n' "${PROJ[@]}"

          if [ "${#PROJ[@]}" -lt 2 ]; then
            echo "❌ 只找到 ${#PROJ[@]} 个工程。请确认 zip 中包含两个独立的 Android 工程（各自有 settings.gradle 与 app 模块）。"
            exit 1
          fi

          # 取前两个
          echo "SENDER=${PROJ[0]}"   | tee -a $GITHUB_OUTPUT
          echo "RECEIVER=${PROJ[1]}" | tee -a $GITHUB_OUTPUT

      # 4) 规范化到固定目录
      - name: Normalize project folders
        run: |
          set -e
          rm -rf phone-caster car-receiver
          rsync -a "${{ steps.detect.outputs.SENDER }}/"   phone-caster/
          rsync -a "${{ steps.detect.outputs.RECEIVER }}/" car-receiver/
          echo "== phone-caster top =="
          ls -la phone-caster | head -n 80
          echo "== car-receiver top =="
          ls -la car-receiver | head -n 80

      # 5) 切换 Gradle 分发镜像并授权 gradlew
      - name: Switch Gradle wrapper to CN mirror & chmod
        run: |
          set -e
          for f in phone-caster/gradle/wrapper/gradle-wrapper.properties car-receiver/gradle/wrapper/gradle-wrapper.properties; do
            if [ -f "$f" ]; then
              cp "$f" "$f.bak" || true
              sed -i 's#https://services.gradle.org/distributions#https://downloads.gradle-dn.com/distributions#g' "$f"
              # 如上不稳可换腾讯云：
              # sed -i 's#https://services.gradle.org/distributions#https://mirrors.cloud.tencent.com/gradle#g' "$f"
              echo "---- $f ----"; tail -n +1 "$f"
            fi
          done
          chmod +x phone-caster/gradlew || true
          chmod +x car-receiver/gradlew || true

      # 6) 编译两个工程（使用各自 wrapper）
      - name: Build phone-caster (debug)
        working-directory: phone-caster
        env:
          GRADLE_USER_HOME: ${{ github.workspace }}/.gradle-home
        run: ./gradlew --no-daemon --stacktrace assembleDebug

      - name: Build car-receiver (debug)
        working-directory: car-receiver
        env:
          GRADLE_USER_HOME: ${{ github.workspace }}/.gradle-home
        run: ./gradlew --no-daemon --stacktrace assembleDebug

      # 7) 收集 APK 打包
      - name: Collect APKs into a single ZIP
        run: |
          mkdir -p out
          cp phone-caster/app/build/outputs/apk/debug/*.apk out/phone-caster-debug.apk || true
          cp car-receiver/app/build/outputs/apk/debug/*.apk out/car-receiver-debug.apk || true
          (cd out && zip -9 -r apks.zip . && ls -la)

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apks
          path: out/apks.zip
